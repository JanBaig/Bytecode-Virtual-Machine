
NOTES

- Learned about conditional preprocessing
- int* pointer, var1 [defining a pointer that holds addresses of variables of type Int]
  var1 = 10 
  pointer = &var1 [var1 is of type Int and therefore, pointer stores it's address]
- Going to have an array of instructions and each instruciton has an opcode (operation code)
- Chunk = [opcode, opcode, opcode, ...]
- Chunk is sequences of bytecode and contains an array of instructions
- We often pass by reference to alter the value directly in memory (not locally to the function)
- General execution structure: initVM() -> reset stack, initChunk() -> reset chunk attributes, [All operations], 
							   interpret() -> executes chunk instructions, freeVM(), freeChunk() -> deallocates all the chunks array attributes 
							   return 0
- Document the meaning of all the exit codes

CHAPTER NOTES

- CHAPTER 14
	- Source Program -> (Compiler) -> ByteCode -> (Interpreted & Executed by) -> VM/Emulator
	- There is both compiling (First) and interpretation (Second) in play
	- JLOX was easy to implement and is portable. But it isn't the best choice because it is slow and memory inefficient.
	- JLOX does not exhibit spacial locality effectively. Leads to lots of overhead. Should arrange data to take advantage of 
	  CPU caching.
	- Processing data is fast (CPU), retriving data is slower (RAM)
	- Because of caching, the way you organize data directly impacts performance.
	- Bytecode adds a bit of overhead, but we get portability in return 
	- Interpretation happens in the VM
	- Chunk = Sequences of ByteCode
	- ByteCode = Series of Instructions (OPCode, Operands) [I1, I2, I3, ...]
	- ByteCode1, ByteCode2, ByteCode3 = Chunk Type

- CHAPTER 15 
	- IP = Instruction Pointer that points to the next instruction
	- vm.ip holds an address of the next intruction (pointing to it)
	  * gets the value at that address
	  increments the address 
	- READ_CONSTANT: Since the current IP holds the OPcode for the instruction, we make another call
					 to READ_BYTE and that returns the index of the constant and we later use that 
					 index and get the value of the constant  
					 For constants, the chunk->code stores the constant's index
					 Which is why read_byte would return an index which we can later use to get the 
					 value from the values array 
	- Offset is from the start of the chunk->code  
	- A static function in C has a scope that is limited to its object file.
	- The stack acts like a shared workspace allows all operations to read from and write to.


- CHAPTER 17
	- Make use of global variables so that we don't have to pass the state around from function to function in the compiler
	- Why do we even need to know the previous token for error reporting? 
	  Is it because the current token is the TOKEN_ERROR itself? Aha, yes, that is the case indeed. 
	- (?) Since the OP_CONSTANT instruction uses a single byte for the index operand, we can store and load 
	  only up to 256 constants in a chunk.

			What does it mean that there is only a limit of 256? I know 2^8=256 but 
			it does not make much sense... Does it mean to say that the value of the constant can 
			only be uptil the value of 256? Since the value needs to be a single byte long as the 
			our code array in the chunk can only hold instructions/constantIndexes that are 1 byte 
			long. So the 256 relates more to the max size than the quantity. Clarify this.

			Or maybe this is a limit we just made for ourselves and not based on the limits 
			of the chunk array size? 

	- Pointer to functions: void(*)(int)
	  Essentially, the above is a pointer to a function that takes an integer as
	  an argument and returns nothing. It is also an anonymous
