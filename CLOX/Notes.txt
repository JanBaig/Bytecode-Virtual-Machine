
NOTES

- Source Program -> (Compiler) -> ByteCode -> (Interpreted) -> VM/Emulator -> Machine Code
- Learned about conditional preprocessing
- int* pointer, var1 [defining a pointer that holds addresses of variables of type Int]
  var1 = 10 
  pointer = &var1 [var1 is of type Int and therefore, pointer stores it's address]
- Going to have an array of instructions and each instruciton has an opcode (operation code)
- Chunk = [opcode, opcode, opcode, ...]
- Chunk is sequences of bytecode and contains an array of instructions

QUESTIONS

- Why do we pass in pointers/references when we define/call functions?
	- When we pass a pointer as an argument instead of a variable then the address of the variable is passed instead of the value. 
	  So any change made by the function using the pointer is permanently made at the address of the passed variable. 
	  This technique is known as call by reference in C.
